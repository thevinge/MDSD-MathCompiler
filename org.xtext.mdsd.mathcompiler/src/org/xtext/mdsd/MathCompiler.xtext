grammar org.xtext.mdsd.MathCompiler with org.eclipse.xtext.common.Terminals

generate mathCompiler "http://www.xtext.org/mdsd/MathCompiler"


MathProgram:
	declarations+=Declaration*
;

Declaration:
	ExternalDef | MathExp	
;

ExternalDef:
	'external' name=ID '(' parameters+=Parameter (',' parameters+=Parameter)* ')'			
;

Parameter:
	varName=ID	
;

MathExp:
	'result' name=STRING 'is' exp=Exp
;

Exp returns Expression: 
	Factors ({Binary.left=current} operator=AddSubOperator right=Factors)* 
;

Factors returns Expression:
	FunctionalBind ({Binary.left=current} operator=MultDivOperator right=FunctionalBind)* 
;

MultDivOperator returns MathOperator:
	{Mult} '*' | {Divi} '/'
;


AddSubOperator returns MathOperator:
	{Plus} '+' | {Minus} '-'
;

Primitive returns Expression:
	Constant | Parenthesis | VarReference | ExternalReference		
;

ExternalReference returns Expression: 
	{Ext} external=[ExternalDef] '(' arguments+=Argument (',' arguments+=Argument)* ')'	
;

Argument:
	INT
;


VarReference:
	variable=[Variable]
;

FunctionalBind returns Expression:
	 {Primitive} 'let' variable=Variable 'in' body=Exp ';' | Primitive
;

Variable:
	name=ID '=' expression=Exp
;

Parenthesis:
	'(' expression=Exp ')'	
;

Constant:
	value=INT
;
